// Copyright (C) 2020  Gokhan Solak, CRISP, Queen Mary University of London
// This code is licensed under the BSD 3-Clause license (see LICENSE for details)


#ifndef SPRING_CONTROLLER_H
#define SPRING_CONTROLLER_H

#include <ros/ros.h>

#include <spring_framework/spring_display.h>
#include <spring_framework/spring_network.h>

#include <kdl_conversions/kdl_msg.h>
#include <eigen_conversions/eigen_kdl.h>

#include <kdl_control_tools/kdl_helper.h>

#include <eigen3/Eigen/Core>
#include <eigen3/Eigen/Geometry>

#include <kdl_control_tools/progress_logger.h>


namespace spring_framework
{

// SpringController class defines a virtual object w.r.t. contact positions.
// Its control is based on a SpringNetwork.
// It calculates the force generated by each springs, and object
// manipulation force generated by a desired frame spring.
// A desired frame spring generates both translation and rotation forces.
class SpringController
{
  private:

    // object control gains
    double k_rot_;
    double k_pos_;
    double k_vel_;

    // contact count
    // number of contacts made with the object.
    // contact point frames (typically fingertip frames)
    // are stored as the first elements of frame_vec_.
    int contact_count_;

    // a set of frames are used to define the springs.
    // typically fingertip frames, but can be anything.
    // these frames are then referred with their index.
    // virtual object frame vf_ is the first element of
    // this set. Contact frames follow. Then the other frames.
    std::vector<KDL::Frame> frame_vec_;

    // virtual spring objects are stored in the network
    // it's an object created externally
    shared_ptr<SpringNetwork> network_;

    // velocity history
    deque<KDL::Vector> vel_que_;

    bool fresh_; // track state: begin

    // timing
    ros::Time t_update_;

    // debugging
    shared_ptr<kdl_control_tools::ProgressLogger> p_logger_;

    // functions
    static KDL::Rotation generalVirtualOrientation_(std::vector<KDL::Frame>& frame_vec, int contact_count=-1);
    static KDL::Rotation wimbocksVirtualOrientation_(std::vector<KDL::Frame>& frame_vec);

  public:

    SpringController(int contact_count, shared_ptr<SpringNetwork> network={});
    ~SpringController();

    // returns the virtual frame for the given frames vector.
    // if contact_count is given, that many frames will be used. -1 means all frames.
    static KDL::Frame computeVirtualFrame(std::vector<KDL::Frame>& frame_vec, int contact_count=-1);

    // updates the frames and calculates the new virtual frame pose using the frames
    void updateState(const std::vector<KDL::Frame> &frame_vec);

    // calculate force for a spring
    void calcForce(const int spring_no, KDL::Vector &f_out);

    // calculate forces for all springs
    void calcSpringForces(std::vector<KDL::Vector> &f_outs);

    // calculate forces for all frames, 0th frame is the VF (!)
    void calcFrameForces(std::vector<KDL::Vector> &f_outs, bool double_sided=false);

    // calculates the force to manipulate object position using the desired position and velocity
    // this force is the same for all fingers
    void calcPositionForce(const KDL::Vector x_des, const KDL::Vector xd_des, KDL::Vector &f_out);
    // calculates the force to manipulate object rotation using the desired rotation
    // returns a vector of forces, for all fingers
    // TODO: rotational damping
    void calcRotationForce(const KDL::Rotation x_des, std::vector<KDL::Vector> &f_outs);

    // sets rest lengths to the current distances between fingers and the VF
    void resetRestLengths(const double scaler = 1.0);

    // getters and setters
      // getters
    void getVirtualFrame(KDL::Frame& vf) const;
    KDL::Frame getVirtualFrame() const;
    std::vector<KDL::Frame> getFrames() const;
    double getRestLength(const int spring_no) const;
    std::vector<double> getStiffness() const;
    double getStiffness(const int spring_no) const;
    double getPositionGain() const;
    double getVelocityGain() const;
    double getRotationGain() const;
      // setters
    void setRestLength(const int spring_no, const double l_rest);
    void setRestLengths(const std::vector<double> l_rest_vec);
    void setStiffness(const double k);
    void setStiffness(const int spring_no, const double k);
    void setPositionGain(const double k);
    void setVelocityGain(const double k);
    void setRotationGain(const double k);

    // debugging
    void connectLogger(shared_ptr<kdl_control_tools::ProgressLogger> logger);

};

} // end namespace spring_framework

#endif // SPRING_CONTROLLER_H
